// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SonosBridgeServiceClient is the client API for SonosBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SonosBridgeServiceClient interface {
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetAuthUrl(ctx context.Context, in *GetAuthUrlRequest, opts ...grpc.CallOption) (*GetAuthUrlResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	GetHousehold(ctx context.Context, in *GetHouseholdRequest, opts ...grpc.CallOption) (*GetHouseholdResponse, error)
}

type sonosBridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSonosBridgeServiceClient(cc grpc.ClientConnInterface) SonosBridgeServiceClient {
	return &sonosBridgeServiceClient{cc}
}

func (c *sonosBridgeServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/sonosbridge.SonosBridgeService/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonosBridgeServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/sonosbridge.SonosBridgeService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonosBridgeServiceClient) GetAuthUrl(ctx context.Context, in *GetAuthUrlRequest, opts ...grpc.CallOption) (*GetAuthUrlResponse, error) {
	out := new(GetAuthUrlResponse)
	err := c.cc.Invoke(ctx, "/sonosbridge.SonosBridgeService/GetAuthUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonosBridgeServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/sonosbridge.SonosBridgeService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonosBridgeServiceClient) GetHousehold(ctx context.Context, in *GetHouseholdRequest, opts ...grpc.CallOption) (*GetHouseholdResponse, error) {
	out := new(GetHouseholdResponse)
	err := c.cc.Invoke(ctx, "/sonosbridge.SonosBridgeService/GetHousehold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SonosBridgeServiceServer is the server API for SonosBridgeService service.
// All implementations should embed UnimplementedSonosBridgeServiceServer
// for forward compatibility
type SonosBridgeServiceServer interface {
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetAuthUrl(context.Context, *GetAuthUrlRequest) (*GetAuthUrlResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	GetHousehold(context.Context, *GetHouseholdRequest) (*GetHouseholdResponse, error)
}

// UnimplementedSonosBridgeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSonosBridgeServiceServer struct {
}

func (UnimplementedSonosBridgeServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedSonosBridgeServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedSonosBridgeServiceServer) GetAuthUrl(context.Context, *GetAuthUrlRequest) (*GetAuthUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthUrl not implemented")
}
func (UnimplementedSonosBridgeServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedSonosBridgeServiceServer) GetHousehold(context.Context, *GetHouseholdRequest) (*GetHouseholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHousehold not implemented")
}

// UnsafeSonosBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SonosBridgeServiceServer will
// result in compilation errors.
type UnsafeSonosBridgeServiceServer interface {
	mustEmbedUnimplementedSonosBridgeServiceServer()
}

func RegisterSonosBridgeServiceServer(s grpc.ServiceRegistrar, srv SonosBridgeServiceServer) {
	s.RegisterService(&_SonosBridgeService_serviceDesc, srv)
}

func _SonosBridgeService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonosBridgeServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonosbridge.SonosBridgeService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonosBridgeServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonosBridgeService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonosBridgeServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonosbridge.SonosBridgeService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonosBridgeServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonosBridgeService_GetAuthUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonosBridgeServiceServer).GetAuthUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonosbridge.SonosBridgeService/GetAuthUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonosBridgeServiceServer).GetAuthUrl(ctx, req.(*GetAuthUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonosBridgeService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonosBridgeServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonosbridge.SonosBridgeService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonosBridgeServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonosBridgeService_GetHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonosBridgeServiceServer).GetHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonosbridge.SonosBridgeService/GetHousehold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonosBridgeServiceServer).GetHousehold(ctx, req.(*GetHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SonosBridgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonosbridge.SonosBridgeService",
	HandlerType: (*SonosBridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _SonosBridgeService_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _SonosBridgeService_GetConfig_Handler,
		},
		{
			MethodName: "GetAuthUrl",
			Handler:    _SonosBridgeService_GetAuthUrl_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _SonosBridgeService_GetToken_Handler,
		},
		{
			MethodName: "GetHousehold",
			Handler:    _SonosBridgeService_GetHousehold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonosbridge.proto",
}
